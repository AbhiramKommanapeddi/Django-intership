#!/usr/bin/env python
"""
Celery Integration Demo for Django Internship Assignment
Demonstrates background tasks with Redis as broker
"""
import os
import sys
import django
import time
import json

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_internship.settings')
django.setup()

from api.tasks import (
    send_welcome_email, send_password_reset_email, generate_daily_report,
    send_admin_notification, process_api_analytics, send_bulk_notifications,
    cleanup_old_logs, send_notification_email
)
from django.contrib.auth.models import User
from celery import group, chain, chord
from django_internship.celery import app as celery_app

def show_celery_info():
    """Display Celery configuration information"""
    print("=== CELERY CONFIGURATION ===")
    print(f"Broker URL: {celery_app.conf.broker_url}")
    print(f"Result Backend: {celery_app.conf.result_backend}")
    print(f"Task Serializer: {celery_app.conf.task_serializer}")
    print(f"Result Serializer: {celery_app.conf.result_serializer}")
    print(f"Timezone: {celery_app.conf.timezone}")
    print()

def demonstrate_basic_tasks():
    """Demonstrate basic Celery tasks"""
    print("=== BASIC CELERY TASKS DEMONSTRATION ===\n")
    
    # Get a user for testing
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå No users found. Create a user first.")
            return
        
        print(f"Using test user: {user.username} ({user.email})")
        print()
        
        # 1. Welcome Email Task
        print("1. üìß WELCOME EMAIL TASK")
        print("   Sending welcome email asynchronously...")
        result = send_welcome_email.delay(user.id)
        print(f"   Task ID: {result.id}")
        print(f"   Task State: {result.state}")
        
        # Wait for result
        try:
            result_value = result.get(timeout=10)
            print(f"   ‚úÖ Result: {result_value}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Task completed but email not sent (email not configured): {e}")
        print()
        
        # 2. Password Reset Email Task
        print("2. üîê PASSWORD RESET EMAIL TASK")
        reset_link = "https://example.com/reset/abc123"
        result = send_password_reset_email.delay(user.id, reset_link)
        print(f"   Task ID: {result.id}")
        try:
            result_value = result.get(timeout=10)
            print(f"   ‚úÖ Result: {result_value}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Task completed: {e}")
        print()
        
        # 3. Admin Notification Task
        print("3. üîî ADMIN NOTIFICATION TASK")
        result = send_admin_notification.delay(
            "System Alert", 
            "This is a test notification from the Celery demo."
        )
        print(f"   Task ID: {result.id}")
        try:
            result_value = result.get(timeout=10)
            print(f"   ‚úÖ Result: {result_value}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Task completed: {e}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error in basic tasks demo: {e}")

def demonstrate_analytics_tasks():
    """Demonstrate analytics and reporting tasks"""
    print("=== ANALYTICS & REPORTING TASKS ===\n")
    
    # 1. Daily Report Generation
    print("1. üìä DAILY REPORT GENERATION")
    print("   Generating daily usage report...")
    result = generate_daily_report.delay()
    print(f"   Task ID: {result.id}")
    
    try:
        report = result.get(timeout=15)
        print("   ‚úÖ Daily Report Generated:")
        print(f"   üìÖ Date: {report['date']}")
        print(f"   üìà Total Requests: {report['total_requests']}")
        print(f"   ‚úÖ Successful: {report['successful_requests']}")
        print(f"   ‚ùå Failed: {report['failed_requests']}")
        print(f"   üìä Success Rate: {report['success_rate']}")
        print(f"   üë• Unique Users: {report['unique_users']}")
        print(f"   üåê Unique IPs: {report['unique_ips']}")
        print(f"   ‚è±Ô∏è Avg Response Time: {report['avg_response_time']}")
        if report['top_endpoints']:
            print(f"   üîù Top Endpoints: {report['top_endpoints']}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    print()
    
    # 2. API Analytics Processing
    print("2. üìà API ANALYTICS PROCESSING")
    print("   Processing API analytics (this may take a few seconds)...")
    result = process_api_analytics.delay()
    print(f"   Task ID: {result.id}")
    
    try:
        analytics = result.get(timeout=20)
        print("   ‚úÖ Analytics Processed:")
        print(f"   üìä Total Requests (7 days): {analytics['total_requests']}")
        print(f"   üë• Unique Users: {analytics['unique_users']}")
        print(f"   ‚è±Ô∏è Avg Response Time: {analytics['avg_response_time']:.3f}s")
        print(f"   ‚ùå Error Rate: {analytics['error_rate']:.1f}%")
        if analytics['most_active_user']:
            print(f"   üèÜ Most Active User: {analytics['most_active_user']['username']} ({analytics['most_active_user']['request_count']} requests)")
        if analytics['slowest_endpoint']:
            print(f"   üêå Slowest Endpoint: {analytics['slowest_endpoint']['endpoint']} ({analytics['slowest_endpoint']['avg_time']:.3f}s)")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    print()

def demonstrate_bulk_operations():
    """Demonstrate bulk operations and advanced features"""
    print("=== BULK OPERATIONS & ADVANCED FEATURES ===\n")
    
    # 1. Bulk Notifications
    print("1. üì¨ BULK NOTIFICATIONS")
    users = User.objects.all()[:3]  # Get first 3 users
    if users:
        user_ids = [user.id for user in users]
        print(f"   Sending bulk notification to {len(user_ids)} users...")
        
        result = send_bulk_notifications.delay(
            user_ids,
            "System Maintenance Notice",
            "We will be performing scheduled maintenance on our API servers tonight from 2 AM to 4 AM UTC. During this time, some services may be temporarily unavailable."
        )
        print(f"   Task ID: {result.id}")
        
        try:
            bulk_result = result.get(timeout=15)
            print("   ‚úÖ Bulk Notification Completed:")
            print(f"   üìß Sent: {bulk_result['sent_count']}")
            print(f"   ‚ùå Failed: {bulk_result['failed_count']}")
            if bulk_result['failed_emails']:
                print(f"   Failed emails: {bulk_result['failed_emails']}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Bulk notification task completed: {e}")
    else:
        print("   ‚ùå No users found for bulk notification demo")
    print()
    
    # 2. Cleanup Task
    print("2. üßπ CLEANUP OLD LOGS")
    print("   Cleaning up old API logs...")
    result = cleanup_old_logs.delay()
    print(f"   Task ID: {result.id}")
    
    try:
        cleanup_result = result.get(timeout=10)
        print(f"   ‚úÖ {cleanup_result}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Cleanup task completed: {e}")
    print()

def demonstrate_task_workflows():
    """Demonstrate complex task workflows using groups, chains, and chords"""
    print("=== TASK WORKFLOWS (GROUPS, CHAINS, CHORDS) ===\n")
    
    try:
        users = User.objects.all()[:2]
        if not users:
            print("‚ùå No users found for workflow demo")
            return
        
        print("1. üîó TASK CHAIN (Sequential Execution)")
        print("   Executing: Generate Report ‚Üí Send Admin Notification")
        
        # Create a chain: generate report, then send notification
        workflow = chain(
            generate_daily_report.s(),
            send_admin_notification.s("Daily Report", "Daily report has been generated.")
        )
        
        result = workflow.apply_async()
        print(f"   Workflow ID: {result.id}")
        print("   Waiting for chain to complete...")
        
        try:
            final_result = result.get(timeout=20)
            print(f"   ‚úÖ Chain completed: {final_result}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Chain completed with note: {e}")
        print()
        
        print("2. ü§ù TASK GROUP (Parallel Execution)")
        print("   Executing multiple tasks in parallel...")
        
        # Create a group of tasks to run in parallel
        parallel_tasks = group(
            send_welcome_email.s(users[0].id),
            generate_daily_report.s(),
            process_api_analytics.s()
        )
        
        result = parallel_tasks.apply_async()
        print(f"   Group ID: {result.id}")
        print("   Waiting for all tasks to complete...")
        
        try:
            group_results = result.get(timeout=25)
            print("   ‚úÖ All parallel tasks completed:")
            for i, res in enumerate(group_results, 1):
                print(f"      Task {i}: {'‚úÖ Success' if res else '‚ö†Ô∏è Completed'}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Group tasks completed: {e}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error in workflow demo: {e}")

def show_task_monitoring():
    """Show how to monitor Celery tasks"""
    print("=== TASK MONITORING ===\n")
    
    print("üìä CELERY MONITORING COMMANDS:")
    print("   ‚Ä¢ Check active tasks: celery -A django_internship inspect active")
    print("   ‚Ä¢ Check registered tasks: celery -A django_internship inspect registered")
    print("   ‚Ä¢ Check task stats: celery -A django_internship inspect stats")
    print("   ‚Ä¢ Monitor events: celery -A django_internship events")
    print("   ‚Ä¢ Flower monitoring: celery -A django_internship flower")
    print()
    
    print("üîç TASK RESULT INSPECTION:")
    print("   You can inspect task results using:")
    print("   from celery.result import AsyncResult")
    print("   result = AsyncResult('task-id')")
    print("   print(result.state, result.result)")
    print()

def main():
    print("üöÄ DJANGO INTERNSHIP ASSIGNMENT - CELERY INTEGRATION DEMO")
    print("=" * 70)
    print()
    
    # Check if Redis is running
    try:
        from redis import Redis
        redis_client = Redis.from_url(celery_app.conf.broker_url)
        redis_client.ping()
        print("‚úÖ Redis broker is running and accessible")
    except Exception as e:
        print(f"‚ùå Redis broker connection failed: {e}")
        print("   Please start Redis server: redis-server")
        print("   Or install Redis: https://redis.io/download")
        return
    
    print()
    
    # Show configuration
    show_celery_info()
    
    # Run demonstrations
    demonstrate_basic_tasks()
    demonstrate_analytics_tasks()
    demonstrate_bulk_operations()
    demonstrate_task_workflows()
    show_task_monitoring()
    
    print("üéØ CELERY FEATURES DEMONSTRATED:")
    print("‚úÖ Background email sending after user registration")
    print("‚úÖ Redis as message broker")
    print("‚úÖ Asynchronous task execution")
    print("‚úÖ Task result tracking")
    print("‚úÖ Error handling and retries")
    print("‚úÖ Bulk operations")
    print("‚úÖ Complex workflows (chains, groups, chords)")
    print("‚úÖ Analytics and reporting tasks")
    print("‚úÖ Admin notifications")
    print("‚úÖ Cleanup and maintenance tasks")
    
    print(f"\nüìñ For more details, see the task definitions in: api/tasks.py")
    print(f"üîß To start a Celery worker: celery -A django_internship worker --loglevel=info")

if __name__ == "__main__":
    main()
